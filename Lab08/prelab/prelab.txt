The difference in allocation between lab_a and lab_c is that
lab_a will allocate one contigious memory block where
all values are stored. A second pointer is allocated
that will hold the addresses to the row starts of
that lie in the first region.

lab_c will simply perform a separate allocation for
each row. This is less efficient because it requires
more calls to malloc() and free().

./lab_a with valgrind
==238498== Memcheck, a memory error detector
==238498== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==238498== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
==238498== Command: ./lab_a
==238498== 
The 3x5 2D dynamic matrix
 0.0	 0.1	 0.2	 0.3	 0.4	
 1.0	 1.1	 1.2	 1.3	 1.4	
 2.0	 2.1	 2.2	 2.3	 2.4	
==238498== 
==238498== HEAP SUMMARY:
==238498==     in use at exit: 0 bytes in 0 blocks
==238498==   total heap usage: 3 allocs, 3 frees, 4,240 bytes allocated
==238498== 
==238498== All heap blocks were freed -- no leaks are possible
==238498== 


./lab_c with valgrind
==238498== For lists of detected and suppressed errors, rerun with: -s
==238498== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==238501== Memcheck, a memory error detector
==238501== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==238501== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info
==238501== Command: ./lab_c
==238501== 
The 3x5 2D dynamic matrix
 0.0	 0.1	 0.2	 0.3	 0.4	
 1.0	 1.1	 1.2	 1.3	 1.4	
 2.0	 2.1	 2.2	 2.3	 2.4	
The 3x5 2D dynamic matrix
 0.0	 0.1	 0.2	 0.3	 0.4	
 1.0	 1.1	 1.2	 1.3	 1.4	
 2.0	 2.1	 2.2	 2.3	 2.4	
==238501== 
==238501== HEAP SUMMARY:
==238501==     in use at exit: 0 bytes in 0 blocks
==238501==   total heap usage: 5 allocs, 5 frees, 4,240 bytes allocated
==238501== 
==238501== All heap blocks were freed -- no leaks are possible
==238501== 
==238501== For lists of detected and suppressed errors, rerun with: -s
==238501== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
