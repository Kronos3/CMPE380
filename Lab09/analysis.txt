Homework 9
Andrei Tumbar

The implementation of the quadratic formula was fairly
straight-forward. A small hand optimization can be added
by only computing the square-root/discriminant a single time.

There were no notable shortcomings of the complex number
implementation in C99.

In terms of the test-cases, the first two are expected to fail
as they provide invalid parameters. An extra testcase was added
to show that floating point numbers can be input via the commandline.

Computing the roots of the equation:
    1.000000x**2 + 0.000000x + 1.000000
We expect imaginary roots at -i and i which is
confirmed by the result output:
    root_1: 0.000000 + 1.000000i
    root_2: -0.000000 + -1.000000i

Looking at the second equation:
    1.256100x**2 + 143.350000x + 277.881000
Using a graphing calculator such as Desmos, we expect the
roots to be real which is confirmed by the output where the
imaginary terms are 0:
    root_1: -1.972574 + 0.000000i
    root_2: -112.150505 + 0.000000i

All four optimization levels were run to test the timings. An iteration
count of 10000 was set to get better accuracy.

All numbers are on an order or 1e-08

  -O0  |  -O1  |  -O2  |  -O3
-------------------------------
  4.58 | 2.35  | 1.89  | 0.004

The optimization levels are fairly expected performance outputs
except for the -O3 optimization level. Stepping through the
instructions generated by this optimization level, the compiler
inlined the calculation function as well as unrolled the timing
loop. The timing loop only ran about 3 times instead of 10000
which is why the performance was drastically different from the
other optimization levels.

Knowing this, the best optimization level is the -O2 as it keeps
correct program behaviour as well as having the best performance
overall.
